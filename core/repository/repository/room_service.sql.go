// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: room_service.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createRoomService = `-- name: CreateRoomService :execresult
INSERT INTO room_service (room_id, service_id, created_at)
VALUES (?, ?, ?)
`

type CreateRoomServiceParams struct {
	RoomID    int64
	ServiceID int64
	CreatedAt time.Time
}

func (q *Queries) CreateRoomService(ctx context.Context, arg CreateRoomServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRoomService, arg.RoomID, arg.ServiceID, arg.CreatedAt)
}

const deleteRoomService = `-- name: DeleteRoomService :exec
DELETE FROM room_service
WHERE room_service_id = ?
`

func (q *Queries) DeleteRoomService(ctx context.Context, roomServiceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoomService, roomServiceID)
	return err
}

const getRoomService = `-- name: GetRoomService :one
SELECT room_service_id, room_id, service_id, created_at, updated_at, deleted_at FROM room_service
WHERE room_service_id = ? LIMIT 1
`

func (q *Queries) GetRoomService(ctx context.Context, roomServiceID int64) (RoomService, error) {
	row := q.db.QueryRowContext(ctx, getRoomService, roomServiceID)
	var i RoomService
	err := row.Scan(
		&i.RoomServiceID,
		&i.RoomID,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRoomServices = `-- name: ListRoomServices :many
SELECT room_service_id, room_id, service_id, created_at, updated_at, deleted_at FROM room_service
`

func (q *Queries) ListRoomServices(ctx context.Context) ([]RoomService, error) {
	rows, err := q.db.QueryContext(ctx, listRoomServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoomService
	for rows.Next() {
		var i RoomService
		if err := rows.Scan(
			&i.RoomServiceID,
			&i.RoomID,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomServiceById = `-- name: UpdateRoomServiceById :exec
UPDATE room_service
SET room_id = ?, service_id = ?, updated_at = ?
WHERE room_service_id = ?
`

type UpdateRoomServiceByIdParams struct {
	RoomID        int64
	ServiceID     int64
	UpdatedAt     sql.NullTime
	RoomServiceID int64
}

func (q *Queries) UpdateRoomServiceById(ctx context.Context, arg UpdateRoomServiceByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoomServiceById,
		arg.RoomID,
		arg.ServiceID,
		arg.UpdatedAt,
		arg.RoomServiceID,
	)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: service.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createService = `-- name: CreateService :execresult
INSERT INTO service (name, description, created_at)
VALUES (?, ?, ?)
`

type CreateServiceParams struct {
	Name        string
	Description string
	CreatedAt   time.Time
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createService, arg.Name, arg.Description, arg.CreatedAt)
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM service
WHERE service_id = ?
`

func (q *Queries) DeleteService(ctx context.Context, serviceID int64) error {
	_, err := q.db.ExecContext(ctx, deleteService, serviceID)
	return err
}

const getService = `-- name: GetService :one
SELECT service_id, name, description, created_at, updated_at, deleted_at FROM service
WHERE service_id = ? LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, serviceID int64) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, serviceID)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listServices = `-- name: ListServices :many
SELECT service_id, name, description, created_at, updated_at, deleted_at FROM service
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceById = `-- name: UpdateServiceById :exec
UPDATE service
SET name = ?, description = ?, updated_at = ?
WHERE service_id = ?
`

type UpdateServiceByIdParams struct {
	Name        string
	Description string
	UpdatedAt   sql.NullTime
	ServiceID   int64
}

func (q *Queries) UpdateServiceById(ctx context.Context, arg UpdateServiceByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceById,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
		arg.ServiceID,
	)
	return err
}

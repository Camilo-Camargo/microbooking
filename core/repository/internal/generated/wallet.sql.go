// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallet.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createWallet = `-- name: CreateWallet :execresult
INSERT INTO wallet (amount, created_at)
VALUES (?, ?)
`

type CreateWalletParams struct {
	Amount    string
	CreatedAt time.Time
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createWallet, arg.Amount, arg.CreatedAt)
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallet
WHERE wallet_id = ?
`

func (q *Queries) DeleteWallet(ctx context.Context, walletID int64) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, walletID)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT wallet_id, amount, created_at, updated_at, deleted_at FROM wallet
WHERE wallet_id = ? LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, walletID int64) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, walletID)
	var i Wallet
	err := row.Scan(
		&i.WalletID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listWallets = `-- name: ListWallets :many
SELECT wallet_id, amount, created_at, updated_at, deleted_at FROM wallet
`

func (q *Queries) ListWallets(ctx context.Context) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, listWallets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.WalletID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalletById = `-- name: UpdateWalletById :exec
UPDATE wallet
SET amount = ?
WHERE wallet_id = ?
`

type UpdateWalletByIdParams struct {
	Amount   string
	WalletID int64
}

func (q *Queries) UpdateWalletById(ctx context.Context, arg UpdateWalletByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateWalletById, arg.Amount, arg.WalletID)
	return err
}

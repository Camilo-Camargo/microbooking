// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (role_id, email, password, given_name, surname, created_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	RoleID    int64     `json:"role_id"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	GivenName string    `json:"given_name"`
	Surname   string    `json:"surname"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.RoleID,
		arg.Email,
		arg.Password,
		arg.GivenName,
		arg.Surname,
		arg.CreatedAt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM user
WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, role_id, email, password, given_name, surname, created_at, updated_at, deleted_at FROM user
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.Email,
		&i.Password,
		&i.GivenName,
		&i.Surname,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, role_id, email, password, given_name, surname, created_at, updated_at, deleted_at FROM user
ORDER BY given_name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.Email,
			&i.Password,
			&i.GivenName,
			&i.Surname,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE user
SET role_id = ?, email = ?, password = ?, given_name = ?, surname = ?, updated_at = ?
WHERE user_id = ?
`

type UpdateUserByIdParams struct {
	RoleID    int64        `json:"role_id"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	GivenName string       `json:"given_name"`
	Surname   string       `json:"surname"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	UserID    int64        `json:"user_id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.RoleID,
		arg.Email,
		arg.Password,
		arg.GivenName,
		arg.Surname,
		arg.UpdatedAt,
		arg.UserID,
	)
	return err
}

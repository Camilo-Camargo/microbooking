// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reservation.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const cancelReservation = `-- name: CancelReservation :exec
UPDATE reservation
SET status = 'canceled', deleted_at = ?
WHERE reservation_id = ?
`

type CancelReservationParams struct {
	DeletedAt     sql.NullTime `json:"deleted_at"`
	ReservationID int64        `json:"reservation_id"`
}

func (q *Queries) CancelReservation(ctx context.Context, arg CancelReservationParams) error {
	_, err := q.db.ExecContext(ctx, cancelReservation, arg.DeletedAt, arg.ReservationID)
	return err
}

const createReservation = `-- name: CreateReservation :execresult
INSERT INTO reservation (room_id, user_id, check_in, check_out, status, guests, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateReservationParams struct {
	RoomID    int64                 `json:"room_id"`
	UserID    int64                 `json:"user_id"`
	CheckIn   time.Time             `json:"check_in"`
	CheckOut  time.Time             `json:"check_out"`
	Status    NullReservationStatus `json:"status"`
	Guests    int32                 `json:"guests"`
	CreatedAt time.Time             `json:"created_at"`
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReservation,
		arg.RoomID,
		arg.UserID,
		arg.CheckIn,
		arg.CheckOut,
		arg.Status,
		arg.Guests,
		arg.CreatedAt,
	)
}

const getReservation = `-- name: GetReservation :one
SELECT reservation_id, room_id, user_id, check_in, check_out, status, guests, created_at, updated_at, deleted_at FROM reservation
WHERE reservation_id = ? LIMIT 1
`

func (q *Queries) GetReservation(ctx context.Context, reservationID int64) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, getReservation, reservationID)
	var i Reservation
	err := row.Scan(
		&i.ReservationID,
		&i.RoomID,
		&i.UserID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Status,
		&i.Guests,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listReservations = `-- name: ListReservations :many
SELECT reservation_id, room_id, user_id, check_in, check_out, status, guests, created_at, updated_at, deleted_at FROM reservation
ORDER BY created_at
`

func (q *Queries) ListReservations(ctx context.Context) ([]Reservation, error) {
	rows, err := q.db.QueryContext(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reservation
	for rows.Next() {
		var i Reservation
		if err := rows.Scan(
			&i.ReservationID,
			&i.RoomID,
			&i.UserID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.Guests,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservationById = `-- name: UpdateReservationById :exec
UPDATE reservation
SET room_id = ?, user_id = ?, check_in = ?, check_out = ?, status = ?, guests = ?, updated_at = ?
WHERE reservation_id = ?
`

type UpdateReservationByIdParams struct {
	RoomID        int64                 `json:"room_id"`
	UserID        int64                 `json:"user_id"`
	CheckIn       time.Time             `json:"check_in"`
	CheckOut      time.Time             `json:"check_out"`
	Status        NullReservationStatus `json:"status"`
	Guests        int32                 `json:"guests"`
	UpdatedAt     sql.NullTime          `json:"updated_at"`
	ReservationID int64                 `json:"reservation_id"`
}

func (q *Queries) UpdateReservationById(ctx context.Context, arg UpdateReservationByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateReservationById,
		arg.RoomID,
		arg.UserID,
		arg.CheckIn,
		arg.CheckOut,
		arg.Status,
		arg.Guests,
		arg.UpdatedAt,
		arg.ReservationID,
	)
	return err
}

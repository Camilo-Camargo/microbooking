// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: room.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO room (signage, country, city, providedBy, price_per_night, guests, is_available, images, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateRoomParams struct {
	Signage       string    `json:"signage"`
	Country       string    `json:"country"`
	City          string    `json:"city"`
	Providedby    string    `json:"providedby"`
	PricePerNight float64   `json:"price_per_night"`
	Guests        int32     `json:"guests"`
	IsAvailable   bool      `json:"is_available"`
	Images        string    `json:"images"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRoom,
		arg.Signage,
		arg.Country,
		arg.City,
		arg.Providedby,
		arg.PricePerNight,
		arg.Guests,
		arg.IsAvailable,
		arg.Images,
		arg.CreatedAt,
	)
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM room
WHERE room_id = ?
`

func (q *Queries) DeleteRoom(ctx context.Context, roomID int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, roomID)
	return err
}

const getRoom = `-- name: GetRoom :one
SELECT room_id, signage, country, city, images, providedby, price_per_night, guests, is_available, created_at, upated_at, deleted_at FROM room
WHERE room_id = ? LIMIT 1
`

func (q *Queries) GetRoom(ctx context.Context, roomID int64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoom, roomID)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.Signage,
		&i.Country,
		&i.City,
		&i.Images,
		&i.Providedby,
		&i.PricePerNight,
		&i.Guests,
		&i.IsAvailable,
		&i.CreatedAt,
		&i.UpatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT r.room_id, signage, country, city, images, providedby, price_per_night, r.guests, is_available, r.created_at, upated_at, r.deleted_at, reservation_id, res.room_id, user_id, check_in, check_out, status, res.guests, res.created_at, updated_at, res.deleted_at
FROM room r
LEFT JOIN reservation res ON r.room_id = res.room_id
WHERE res.room_id IS NULL
`

type ListRoomsRow struct {
	RoomID        int64                 `json:"room_id"`
	Signage       string                `json:"signage"`
	Country       string                `json:"country"`
	City          string                `json:"city"`
	Images        string                `json:"images"`
	Providedby    string                `json:"providedby"`
	PricePerNight float64               `json:"price_per_night"`
	Guests        int32                 `json:"guests"`
	IsAvailable   bool                  `json:"is_available"`
	CreatedAt     time.Time             `json:"created_at"`
	UpatedAt      sql.NullTime          `json:"upated_at"`
	DeletedAt     sql.NullTime          `json:"deleted_at"`
	ReservationID sql.NullInt64         `json:"reservation_id"`
	RoomID_2      sql.NullInt64         `json:"room_id_2"`
	UserID        sql.NullInt64         `json:"user_id"`
	CheckIn       sql.NullTime          `json:"check_in"`
	CheckOut      sql.NullTime          `json:"check_out"`
	Status        NullReservationStatus `json:"status"`
	Guests_2      sql.NullInt32         `json:"guests_2"`
	CreatedAt_2   sql.NullTime          `json:"created_at_2"`
	UpdatedAt     sql.NullTime          `json:"updated_at"`
	DeletedAt_2   sql.NullTime          `json:"deleted_at_2"`
}

func (q *Queries) ListRooms(ctx context.Context) ([]ListRoomsRow, error) {
	rows, err := q.db.QueryContext(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRoomsRow
	for rows.Next() {
		var i ListRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.Signage,
			&i.Country,
			&i.City,
			&i.Images,
			&i.Providedby,
			&i.PricePerNight,
			&i.Guests,
			&i.IsAvailable,
			&i.CreatedAt,
			&i.UpatedAt,
			&i.DeletedAt,
			&i.ReservationID,
			&i.RoomID_2,
			&i.UserID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.Guests_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.DeletedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomById = `-- name: UpdateRoomById :exec
UPDATE room
SET signage = ?, guests = ?, price_per_night = ?, is_available = ?, created_at = ?
WHERE room_id = ?
`

type UpdateRoomByIdParams struct {
	Signage       string    `json:"signage"`
	Guests        int32     `json:"guests"`
	PricePerNight float64   `json:"price_per_night"`
	IsAvailable   bool      `json:"is_available"`
	CreatedAt     time.Time `json:"created_at"`
	RoomID        int64     `json:"room_id"`
}

func (q *Queries) UpdateRoomById(ctx context.Context, arg UpdateRoomByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateRoomById,
		arg.Signage,
		arg.Guests,
		arg.PricePerNight,
		arg.IsAvailable,
		arg.CreatedAt,
		arg.RoomID,
	)
	return err
}

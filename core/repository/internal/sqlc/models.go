// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlc

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type InvoiceStatus string

const (
	InvoiceStatusPaid     InvoiceStatus = "paid"
	InvoiceStatusPending  InvoiceStatus = "pending"
	InvoiceStatusRejected InvoiceStatus = "rejected"
)

func (e *InvoiceStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvoiceStatus(s)
	case string:
		*e = InvoiceStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for InvoiceStatus: %T", src)
	}
	return nil
}

type NullInvoiceStatus struct {
	InvoiceStatus InvoiceStatus `json:"invoice_status"`
	Valid         bool          `json:"valid"` // Valid is true if InvoiceStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvoiceStatus) Scan(value interface{}) error {
	if value == nil {
		ns.InvoiceStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvoiceStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvoiceStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvoiceStatus), nil
}

type ReservationStatus string

const (
	ReservationStatusPending   ReservationStatus = "pending"
	ReservationStatusConfirmed ReservationStatus = "confirmed"
	ReservationStatusCanceled  ReservationStatus = "canceled"
)

func (e *ReservationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReservationStatus(s)
	case string:
		*e = ReservationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReservationStatus: %T", src)
	}
	return nil
}

type NullReservationStatus struct {
	ReservationStatus ReservationStatus `json:"reservation_status"`
	Valid             bool              `json:"valid"` // Valid is true if ReservationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReservationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReservationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReservationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReservationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReservationStatus), nil
}

type Invoice struct {
	InvoiceID    int64         `json:"invoice_id"`
	FromWalletID int64         `json:"from_wallet_id"`
	ToWalletID   int64         `json:"to_wallet_id"`
	Status       InvoiceStatus `json:"status"`
	Amount       string        `json:"amount"`
	CreatedAt    time.Time     `json:"created_at"`
	UpdatedAt    sql.NullTime  `json:"updated_at"`
	DeletedAt    sql.NullTime  `json:"deleted_at"`
}

type Reservation struct {
	ReservationID int64                 `json:"reservation_id"`
	RoomID        int64                 `json:"room_id"`
	UserID        int64                 `json:"user_id"`
	CheckIn       time.Time             `json:"check_in"`
	CheckOut      time.Time             `json:"check_out"`
	Status        NullReservationStatus `json:"status"`
	Guests        int32                 `json:"guests"`
	CreatedAt     time.Time             `json:"created_at"`
	UpdatedAt     sql.NullTime          `json:"updated_at"`
	DeletedAt     sql.NullTime          `json:"deleted_at"`
}

type Role struct {
	RoleID    int64        `json:"role_id"`
	Name      string       `json:"name"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Room struct {
	RoomID        int64        `json:"room_id"`
	Signage       string       `json:"signage"`
	Guests        int32        `json:"guests"`
	PricePerNight string       `json:"price_per_night"`
	IsAvailable   bool         `json:"is_available"`
	CreatedAt     time.Time    `json:"created_at"`
	UpatedAt      sql.NullTime `json:"upated_at"`
	DeletedAt     sql.NullTime `json:"deleted_at"`
}

type RoomService struct {
	RoomServiceID int64        `json:"room_service_id"`
	RoomID        int64        `json:"room_id"`
	ServiceID     int64        `json:"service_id"`
	CreatedAt     time.Time    `json:"created_at"`
	UpdatedAt     sql.NullTime `json:"updated_at"`
	DeletedAt     sql.NullTime `json:"deleted_at"`
}

type Service struct {
	ServiceID   int64        `json:"service_id"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	CreatedAt   time.Time    `json:"created_at"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
	DeletedAt   sql.NullTime `json:"deleted_at"`
}

type User struct {
	UserID    int64        `json:"user_id"`
	RoleID    int64        `json:"role_id"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	GivenName string       `json:"given_name"`
	Surname   string       `json:"surname"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Wallet struct {
	WalletID  int64        `json:"wallet_id"`
	Amount    string       `json:"amount"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}
